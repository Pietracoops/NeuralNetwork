#include "NeuralNet.h"

using namespace std;


int main()
{


//========================================================== DEBUGGING SECTION ============================================================
	ofstream fout;
	fout.open("output.txt");
	int DEBUG = 0;

	vector< vector<double> > allData(150, vector<double>(7));

	fout << "RAW DATA" << endl;

	string filename = "C:\\Users\\Massimo\\Documents\\Programming_Projects\\NeuralNetwork\\CapstoneNeuralNet\\Data\\BCE.TO.csv";
	TickerObject BMO(filename, true);





	if (DEBUG == 1) system("pause");
	if (DEBUG == 1) return 0;


//=========================================================================================================================================


	vector<vector<double>> Inputs;
	vector<vector<double>> Outputs;
	
		Inputs.push_back({5.1, 3.5, 1.4, 0.2}); 
		Inputs.push_back({4.9, 3.0, 1.4, 0.2}); 
		Inputs.push_back({4.7, 3.2, 1.3, 0.2}); 
		Inputs.push_back({4.6, 3.1, 1.5, 0.2}); 
		Inputs.push_back({5.0, 3.6, 1.4, 0.2}); 
		Inputs.push_back({5.4, 3.9, 1.7, 0.4}); 
		Inputs.push_back({4.6, 3.4, 1.4, 0.3}); 
		Inputs.push_back({5.0, 3.4, 1.5, 0.2}); 
		Inputs.push_back({4.4, 2.9, 1.4, 0.2}); 
		Inputs.push_back({4.9, 3.1, 1.5, 0.1}); 
		Inputs.push_back({5.4, 3.7, 1.5, 0.2}); 
		Inputs.push_back({4.8, 3.4, 1.6, 0.2}); 
		Inputs.push_back({4.8, 3.0, 1.4, 0.1}); 
		Inputs.push_back({4.3, 3.0, 1.1, 0.1}); 
		Inputs.push_back({5.8, 4.0, 1.2, 0.2}); 
		Inputs.push_back({5.7, 4.4, 1.5, 0.4}); 
		Inputs.push_back({5.4, 3.9, 1.3, 0.4}); 
		Inputs.push_back({5.1, 3.5, 1.4, 0.3}); 
		Inputs.push_back({5.7, 3.8, 1.7, 0.3}); 
		Inputs.push_back({5.1, 3.8, 1.5, 0.3}); 
		Inputs.push_back({5.4, 3.4, 1.7, 0.2}); 
		Inputs.push_back({5.1, 3.7, 1.5, 0.4}); 
		Inputs.push_back({4.6, 3.6, 1.0, 0.2}); 
		Inputs.push_back({5.1, 3.3, 1.7, 0.5}); 
		Inputs.push_back({4.8, 3.4, 1.9, 0.2}); 
		Inputs.push_back({5.0, 3.0, 1.6, 0.2}); 
		Inputs.push_back({5.0, 3.4, 1.6, 0.4}); 
		Inputs.push_back({5.2, 3.5, 1.5, 0.2}); 
		Inputs.push_back({5.2, 3.4, 1.4, 0.2}); 
		Inputs.push_back({4.7, 3.2, 1.6, 0.2}); 
		Inputs.push_back({4.8, 3.1, 1.6, 0.2}); 
		Inputs.push_back({5.4, 3.4, 1.5, 0.4}); 
		Inputs.push_back({5.2, 4.1, 1.5, 0.1}); 
		Inputs.push_back({5.5, 4.2, 1.4, 0.2}); 
		Inputs.push_back({4.9, 3.1, 1.5, 0.1}); 
		Inputs.push_back({5.0, 3.2, 1.2, 0.2}); 
		Inputs.push_back({5.5, 3.5, 1.3, 0.2}); 
		Inputs.push_back({4.9, 3.1, 1.5, 0.1}); 
		Inputs.push_back({4.4, 3.0, 1.3, 0.2}); 
		Inputs.push_back({5.1, 3.4, 1.5, 0.2}); 
		Inputs.push_back({5.0, 3.5, 1.3, 0.3}); 
		Inputs.push_back({4.5, 2.3, 1.3, 0.3}); 
		Inputs.push_back({4.4, 3.2, 1.3, 0.2}); 
		Inputs.push_back({5.0, 3.5, 1.6, 0.6}); 
		Inputs.push_back({5.1, 3.8, 1.9, 0.4}); 
		Inputs.push_back({4.8, 3.0, 1.4, 0.3}); 
		Inputs.push_back({5.1, 3.8, 1.6, 0.2}); 
		Inputs.push_back({4.6, 3.2, 1.4, 0.2}); 
		Inputs.push_back({5.3, 3.7, 1.5, 0.2}); 
		Inputs.push_back({5.0, 3.3, 1.4, 0.2}); 
		Inputs.push_back({7.0, 3.2, 4.7, 1.4}); 
		Inputs.push_back({6.4, 3.2, 4.5, 1.5}); 
		Inputs.push_back({6.9, 3.1, 4.9, 1.5}); 
		Inputs.push_back({5.5, 2.3, 4.0, 1.3}); 
		Inputs.push_back({6.5, 2.8, 4.6, 1.5}); 
		Inputs.push_back({5.7, 2.8, 4.5, 1.3}); 
		Inputs.push_back({6.3, 3.3, 4.7, 1.6}); 
		Inputs.push_back({4.9, 2.4, 3.3, 1.0}); 
		Inputs.push_back({6.6, 2.9, 4.6, 1.3}); 
		Inputs.push_back({5.2, 2.7, 3.9, 1.4}); 
		Inputs.push_back({5.0, 2.0, 3.5, 1.0}); 
		Inputs.push_back({5.9, 3.0, 4.2, 1.5}); 
		Inputs.push_back({6.0, 2.2, 4.0, 1.0}); 
		Inputs.push_back({6.1, 2.9, 4.7, 1.4}); 
		Inputs.push_back({5.6, 2.9, 3.6, 1.3}); 
		Inputs.push_back({6.7, 3.1, 4.4, 1.4}); 
		Inputs.push_back({5.6, 3.0, 4.5, 1.5}); 
		Inputs.push_back({5.8, 2.7, 4.1, 1.0}); 
		Inputs.push_back({6.2, 2.2, 4.5, 1.5}); 
		Inputs.push_back({5.6, 2.5, 3.9, 1.1}); 
		Inputs.push_back({5.9, 3.2, 4.8, 1.8}); 
		Inputs.push_back({6.1, 2.8, 4.0, 1.3}); 
		Inputs.push_back({6.3, 2.5, 4.9, 1.5}); 
		Inputs.push_back({6.1, 2.8, 4.7, 1.2}); 
		Inputs.push_back({6.4, 2.9, 4.3, 1.3}); 
		Inputs.push_back({6.6, 3.0, 4.4, 1.4}); 
		Inputs.push_back({6.8, 2.8, 4.8, 1.4}); 
		Inputs.push_back({6.7, 3.0, 5.0, 1.7}); 
		Inputs.push_back({6.0, 2.9, 4.5, 1.5}); 
		Inputs.push_back({5.7, 2.6, 3.5, 1.0}); 
		Inputs.push_back({5.5, 2.4, 3.8, 1.1}); 
		Inputs.push_back({5.5, 2.4, 3.7, 1.0}); 
		Inputs.push_back({5.8, 2.7, 3.9, 1.2}); 
		Inputs.push_back({6.0, 2.7, 5.1, 1.6}); 
		Inputs.push_back({5.4, 3.0, 4.5, 1.5}); 
		Inputs.push_back({6.0, 3.4, 4.5, 1.6}); 
		Inputs.push_back({6.7, 3.1, 4.7, 1.5}); 
		Inputs.push_back({6.3, 2.3, 4.4, 1.3}); 
		Inputs.push_back({5.6, 3.0, 4.1, 1.3}); 
		Inputs.push_back({5.5, 2.5, 4.0, 1.3}); 
		Inputs.push_back({5.5, 2.6, 4.4, 1.2}); 
		Inputs.push_back({6.1, 3.0, 4.6, 1.4}); 
		Inputs.push_back({5.8, 2.6, 4.0, 1.2}); 
		Inputs.push_back({5.0, 2.3, 3.3, 1.0}); 
		Inputs.push_back({5.6, 2.7, 4.2, 1.3}); 
		Inputs.push_back({5.7, 3.0, 4.2, 1.2}); 
		Inputs.push_back({5.7, 2.9, 4.2, 1.3}); 
		Inputs.push_back({6.2, 2.9, 4.3, 1.3}); 
		Inputs.push_back({5.1, 2.5, 3.0, 1.1}); 
		Inputs.push_back({5.7, 2.8, 4.1, 1.3}); 
		Inputs.push_back({6.3, 3.3, 6.0, 2.5}); 
		Inputs.push_back({5.8, 2.7, 5.1, 1.9}); 
		Inputs.push_back({7.1, 3.0, 5.9, 2.1}); 
		Inputs.push_back({6.3, 2.9, 5.6, 1.8}); 
		Inputs.push_back({6.5, 3.0, 5.8, 2.2}); 
		Inputs.push_back({7.6, 3.0, 6.6, 2.1}); 
		Inputs.push_back({4.9, 2.5, 4.5, 1.7}); 
		Inputs.push_back({7.3, 2.9, 6.3, 1.8}); 
		Inputs.push_back({6.7, 2.5, 5.8, 1.8}); 
		Inputs.push_back({7.2, 3.6, 6.1, 2.5}); 
		Inputs.push_back({6.5, 3.2, 5.1, 2.0}); 
		Inputs.push_back({6.4, 2.7, 5.3, 1.9}); 
		Inputs.push_back({6.8, 3.0, 5.5, 2.1}); 
		Inputs.push_back({5.7, 2.5, 5.0, 2.0}); 
		Inputs.push_back({5.8, 2.8, 5.1, 2.4}); 
		Inputs.push_back({6.4, 3.2, 5.3, 2.3}); 
		Inputs.push_back({6.5, 3.0, 5.5, 1.8}); 
		Inputs.push_back({7.7, 3.8, 6.7, 2.2}); 
		Inputs.push_back({7.7, 2.6, 6.9, 2.3}); 
		Inputs.push_back({6.0, 2.2, 5.0, 1.5}); 
		Inputs.push_back({6.9, 3.2, 5.7, 2.3}); 
		Inputs.push_back({5.6, 2.8, 4.9, 2.0}); 
		Inputs.push_back({7.7, 2.8, 6.7, 2.0}); 
		Inputs.push_back({6.3, 2.7, 4.9, 1.8}); 
		Inputs.push_back({6.7, 3.3, 5.7, 2.1}); 
		Inputs.push_back({7.2, 3.2, 6.0, 1.8}); 
		Inputs.push_back({6.2, 2.8, 4.8, 1.8}); 
		Inputs.push_back({6.1, 3.0, 4.9, 1.8}); 
		Inputs.push_back({6.4, 2.8, 5.6, 2.1}); 
		Inputs.push_back({7.2, 3.0, 5.8, 1.6}); 
		Inputs.push_back({7.4, 2.8, 6.1, 1.9}); 
		Inputs.push_back({7.9, 3.8, 6.4, 2.0}); 
		Inputs.push_back({6.4, 2.8, 5.6, 2.2}); 
		Inputs.push_back({6.3, 2.8, 5.1, 1.5}); 
		Inputs.push_back({6.1, 2.6, 5.6, 1.4}); 
		Inputs.push_back({7.7, 3.0, 6.1, 2.3}); 
		Inputs.push_back({6.3, 3.4, 5.6, 2.4}); 
		Inputs.push_back({6.4, 3.1, 5.5, 1.8}); 
		Inputs.push_back({6.0, 3.0, 4.8, 1.8}); 
		Inputs.push_back({6.9, 3.1, 5.4, 2.1}); 
		Inputs.push_back({6.7, 3.1, 5.6, 2.4}); 
		Inputs.push_back({6.9, 3.1, 5.1, 2.3}); 
		Inputs.push_back({5.8, 2.7, 5.1, 1.9}); 
		Inputs.push_back({6.8, 3.2, 5.9, 2.3}); 
		Inputs.push_back({6.7, 3.3, 5.7, 2.5}); 
		Inputs.push_back({6.7, 3.0, 5.2, 2.3}); 
		Inputs.push_back({6.3, 2.5, 5.0, 1.9}); 
		Inputs.push_back({6.5, 3.0, 5.2, 2.0}); 
		Inputs.push_back({6.2, 3.4, 5.4, 2.3}); 
		Inputs.push_back({5.9, 3.0, 5.1, 1.8}); 

		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 0, 1});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({0, 1, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});
		Outputs.push_back({1, 0, 0});

		vector<int> NNConfig{ 4,4,3 };
		NeuralNet NN(NNConfig);

		NN.TrainNeuralNet(Inputs, Outputs, 0.8);
		
		cout << NN.Accuracy << endl;


	system("pause");
	return 0;
}

